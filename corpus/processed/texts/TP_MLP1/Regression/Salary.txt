```python
from google.colab import files
files.upload()  # Télécharger le fichier kaggle.json
```

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras import regularizers

data = pd.read_csv('Salary_dataset.csv')
print(data.head())
print(data.describe())
print(data.isnull().sum())

# Visualisation
plt.scatter(data['YearsExperience'], data['Salary'])
plt.xlabel('Années d\'expérience')
plt.ylabel('Salaire')
plt.title('Relation Expérience-Salaire')
plt.show()
```

```python
X = data[["YearsExperience"]].values
y = data["Salary"].values
```

```python
# Normalisation
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
y = y.reshape(-1, 1)  # Pour la compatibilité avec Keras
```

```python
# Division des données
X_train, X_temp, y_train, y_temp = train_test_split(X_scaled, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.33, random_state=42)
```

```python
# Création du modèle
model = Sequential()
model.add(Dense(10, activation="relu", input_shape=(1,), kernel_regularizer=regularizers.l2(0.01)))
model.add(Dense(1, activation="linear"))  # Pas de fonction d'activation pour la régression

# Compilation
model.compile(optimizer=Adam(learning_rate=0.01), loss="mse")

# Entraînement
history = model.fit(
    X_train, y_train,
    validation_data=(X_val, y_val),
    epochs=500,
    verbose=0
)
```

```python
# Évaluation
test_loss = model.evaluate(X_test, y_test, verbose=0)
print(f"Test MSE: {test_loss:.2f}")
```

```python
# Prédictions
y_pred = model.predict(X_test)
```

```python

# Visualisation
plt.scatter(X_test, y_test, color="blue", label="Vraies valeurs")
plt.scatter(X_test, y_pred, color="red", label="Prédictions")
plt.xlabel("YearsExperience (normalisé)")
plt.ylabel("Salary")
plt.legend()
plt.show()
```